/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package tools;

import java.awt.*;


/**
 *
 * @author Uli Rodriguez
 */
public class RealFuntionDraw extends javax.swing.JFrame {

    /**
     * Creates new form house
     */
    
    public RealFuntionDraw() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlDraw = new javax.swing.JPanel();
        btnDraw = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        pnlDraw.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pnlDrawMouseClicked(evt);
            }
        });
        getContentPane().add(pnlDraw, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 400, 400));
        pnlDraw.getAccessibleContext().setAccessibleName("");

        btnDraw.setText("Draw");
        btnDraw.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDrawActionPerformed(evt);
            }
        });
        getContentPane().add(btnDraw, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 30, 150, -1));

        setBounds(0, 0, 688, 557);
    }// </editor-fold>//GEN-END:initComponents

    private void drawAxis(){
        Graphics2D g = (Graphics2D) pnlDraw.getGraphics();
        
        g.setColor(Color.white);
        g.fillRect(0, 0, 400, 400);
        
        g.setColor(Color.BLACK);
        //g.drawRect(0, 0, 300, 300);
        
        //x axis from (0,0) to (20,0)
        g.drawLine(Coordenate.toScreenX(Coordenate.XMIN), 
                   Coordenate.toScreenY(0.0f), 
                   Coordenate.toScreenX(Coordenate.XMAX), 
                   Coordenate.toScreenY(0));
        
        
        for (float dx = Coordenate.XMIN; dx <= Coordenate.XMAX; dx += 1.0f) {
            g.drawLine(Coordenate.toScreenX(dx), 
                   Coordenate.toScreenY(-0.5f), 
                   Coordenate.toScreenX(dx), 
                   Coordenate.toScreenY(0.5f));
        }
        
        //y Axis from (0,0) to (0,20)
        g.drawLine(Coordenate.toScreenX(0.05f), 
                   Coordenate.toScreenY(Coordenate.YMIN), 
                   Coordenate.toScreenX(0.05f), 
                   Coordenate.toScreenY(Coordenate.YMAX));
        
        for (float dy = Coordenate.YMIN; dy <= Coordenate.YMAX; dy += 1.0f) {
            g.drawLine(Coordenate.toScreenX(-0.5f), 
                   Coordenate.toScreenY(dy), 
                   Coordenate.toScreenX(0.5f), 
                   Coordenate.toScreenY(dy));
        }
        
    }
    
    private void drawFuntion(){
        //Generate point for y = 0.1 * x^2
        //                  dy = 0.2 * x
        //                  Iy = 0.03333 * x^3
        //Draw points
        
        int nPoints = 100;
        float dx = Coordenate.XMAX / nPoints;
        
        float [] x = new float[nPoints];
        float [] y = new float[nPoints];
        
        float dy [] = new float[nPoints];
        float Iy[] = new float[nPoints];
               
        for (int i = 0; i < nPoints; i++) {
            x[i] = i * dx;
            y[i] = 0.1f * x[i] * x[i];
            dy[i] = 0.2f * x[i];
            Iy[i] = 0.03333f * x[i] * x[i] * x[i]; 
        }
        
        //draw points
        Graphics2D g = (Graphics2D) pnlDraw.getGraphics();
        g.setColor(Color.black);
        
        for (int i = 0; i < nPoints - 1; i++) {
            g.drawLine(Coordenate.toScreenX(x[i]), 
                   Coordenate.toScreenY(y[i]), 
                   Coordenate.toScreenX(x[i + 1]), 
                   Coordenate.toScreenY(y[i + 1]));
        }
        
        g.setColor(Color.red);
        //draw derivate Points
        for (int i = 0; i < nPoints - 1; i++) {
            g.drawLine(Coordenate.toScreenX(x[i]), 
                   Coordenate.toScreenY(dy[i]), 
                   Coordenate.toScreenX(x[i + 1]), 
                   Coordenate.toScreenY(dy[i + 1]));
        }
        
        g.setColor(Color.green);
        //draw integral Points
        for (int i = 0; i < nPoints - 1; i++) {
            g.drawLine(Coordenate.toScreenX(x[i]), 
                   Coordenate.toScreenY(Iy[i]), 
                   Coordenate.toScreenX(x[i + 1]), 
                   Coordenate.toScreenY(Iy[i + 1]));
        }
    }
    
    private void pnlDrawMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnlDrawMouseClicked
        //drawAxis();
    }//GEN-LAST:event_pnlDrawMouseClicked

    private void btnDrawActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDrawActionPerformed
        drawAxis();
        drawFuntion();
    }//GEN-LAST:event_btnDrawActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RealFuntionDraw.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RealFuntionDraw.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RealFuntionDraw.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RealFuntionDraw.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RealFuntionDraw().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDraw;
    private javax.swing.JPanel pnlDraw;
    // End of variables declaration//GEN-END:variables
}
